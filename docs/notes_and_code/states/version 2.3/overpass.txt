I was working on the console display on 8:58 AM 2/25/2015 and I noticed in an XML document that Google Maps Route objects now have distance and time for steps, not just legs as it had originally been. This obviates the need for all of the Overpass API stuff that I have been doing, with calculating averages and stuff. I will strip all of the Overpass API code and replace it with the Google Maps Results. I will still need stoplight data. This will also remove all need for Geocoding, since it was used to correlate Overpass data to Google Maps Data. I will still perform a few queries to get road names after the most efficient route has been calculated. 

I found out on 7:14 PM 2/26/2015 after reconfiguring the program to work with the new data that the speeds are inaccurate from what was originally had, and since almost all of them are below the actual limit, that it had to do with acceleration and deceleration from traffic signals. I tried to come up with a solution by comparing distances and times and such to try to find a correlation, but I have no certainty as to how to adjust to this because I have very little other data to work with. I asked a question about it on StackOverflow. For now I will assume that the speeds are correct. 

Now I need to integrate acceleration and deceleration into the code. 

I also noticed with the Elevation API that there is always the 'No Access-Control-Allow-Origin Header' when an XMLHttpRequest is made, but never when it is for Geocoding. I wonder if this is a bug, or built in. Until I can use XMLHttpRequest, I will not be able to speed up the elevation process. 

I also looked for fuel efficiency data on http://www.fueleconomy.gov/feg/which_tested.shtml. Later the same night, I reworked the intersections generation to search for frequencies in the path that are distinguished from other ones, meaning that they jump out from the background. This will be more reliable and less convoluted than the old method, which I barely understand anymore.

The next day, I wrote an alternate function for XMLHttpRequest in elevation, but I still got the same error.

I began work on building in acceleration and deceleration. I began by making a function to generate a path for each candidate solution, which are chosen by being close to the optimal in cost. Each candidate has a number of speed changes made to it based on the speed transition or presence of stoplight or stopsign, and the direction of turn. To get the turn, I made a global function which returns the angle from 3 points (I already had the code written from the instructions generator). I took a picture of the whiteboard I used to plan all of this out. I updated the next/last attribute of pts in a connection in an intersection that is reversed. I also made the tally in connections.force_to not take into account negative forces (since it would cause an increase in velocity), and replace them with zero. The function I create the more accurate cost tallies up the original force minus the drag, which is recalculated. New drag is put up in its place. For now, the excess force generated by deceleration is simply subtracted, because for now it is too complicated to factor in all of the continuities. This will likely happen later. It took several tries to debug it.

I needed a solution to display the data, and to do this I initially experimented with generating an HTML page in the DOM and also uploading a template through and iframe and editting that with DOM. The latter failed because of cross-domain issues from iframe.contentDocument. The solution that I will use is to make a template page, and open a new tab for the user with this page, and have the parameters sent via URL. They will be stringified by JSON and escaped, then unescaped and parsed by JSON to have mostly intact data. I may use a static Google Map to display the route info. URL to figure out display of instructions: http://stackoverflow.com/questions/14070105/pre-fill-form-field-via-url-in-html. 4:05 PM 2/28/2015

I continued through the next week to generate a url to pass to a separate HTML page. The HTML page loads a google map, and has a div where the total distance can go, as well as a div that can have a list appended to it. I decided that the list should have a turn icon (which were not made at this point), and the icon for the thing at the turn (like a stoplight). It is minimally formatted, and I emailed Akshat to improve the formatting.

On Thursday 3/5/15, I sent emails to Collin and Akshat as a substitute for the meeting to coordinate work.

I had I final idea on 5:09 PM 3/7/2015 to minimize the amount of elevation data collected. It is to make a list of unique points and reference the index of the occurances of the same point in the pts array. It should (based on previous estimations) decrease the number of queries by half. I needed to adjust the elevation function so that it compiled requests by the point counts. In addition to making references to the points themselves, I also made a variable which is a list of the references. The function cycles through those, and sends the point as well as the references to the Request function, which upon receiving the information, assigns all the points in the indexes index that elevation. In the Millbridge to N Peace Haven example, the number of queries decreased from 11 to 4. It worked on the first attempt, after code debug.

Finally, I replaced XMLHttpRequest with Ajax in jQuery. I was researching ways to get elevation data from Elevation API and I discovered that it might be possible using jQuery/Ajax. I experimented with JSONP, but it failed. I looked at jQuery documentation, and discovered that Ajax is completely cross-browser compatible. I developed queries by testing them in the console, and 

I cleaned up the code in script, placing manipulated variables in the Network function, but leaving constants and the map variable as global. Extraneous functions were deleted.

Finished 7:02 PM 3/10/2015